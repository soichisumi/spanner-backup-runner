// Code generated by yo. DO NOT EDIT.
// Package yo contains the types.
package yo

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Testdatum represents a row from 'Testdata'.
type Testdatum struct {
	ID  string `spanner:"ID" json:"ID"`   // ID
	Str string `spanner:"Str" json:"Str"` // Str
	Num int64  `spanner:"Num" json:"Num"` // Num
}

func TestdatumPrimaryKeys() []string {
	return []string{
		"ID",
	}
}

func TestdatumColumns() []string {
	return []string{
		"ID",
		"Str",
		"Num",
	}
}

func (t *Testdatum) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "ID":
			ret = append(ret, &t.ID)
		case "Str":
			ret = append(ret, &t.Str)
		case "Num":
			ret = append(ret, &t.Num)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Testdatum) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "ID":
			ret = append(ret, t.ID)
		case "Str":
			ret = append(ret, t.Str)
		case "Num":
			ret = append(ret, t.Num)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTestdatum_Decoder returns a decoder which reads a row from *spanner.Row
// into Testdatum. The decoder is not goroutine-safe. Don't use it concurrently.
func newTestdatum_Decoder(cols []string) func(*spanner.Row) (*Testdatum, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Testdatum, error) {
		var t Testdatum
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Testdatum) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Testdata", TestdatumColumns(), []interface{}{
		t.ID, t.Str, t.Num,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Testdatum) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("Testdata", TestdatumColumns(), []interface{}{
		t.ID, t.Str, t.Num,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Testdatum) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("Testdata", TestdatumColumns(), []interface{}{
		t.ID, t.Str, t.Num,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Testdatum) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TestdatumPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Testdatum.UpdateColumns", "Testdata", err)
	}

	return spanner.Update("Testdata", colsWithPKeys, values), nil
}

// FindTestdatum gets a Testdatum by primary key
func FindTestdatum(ctx context.Context, db YORODB, id string) (*Testdatum, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "Testdata", key, TestdatumColumns())
	if err != nil {
		return nil, newError("FindTestdatum", "Testdata", err)
	}

	decoder := newTestdatum_Decoder(TestdatumColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTestdatum", "Testdata", err)
	}

	return t, nil
}

// Delete deletes the Testdatum from the database.
func (t *Testdatum) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TestdatumPrimaryKeys())
	return spanner.Delete("Testdata", spanner.Key(values))
}
